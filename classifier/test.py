import pickle
import datetime

from feature import *
from liblinearutil import *

class Test(object):
    def __init__(self):
        self.model = self._get_model()
        self.stopwords = stopword('english.stp')
        self.feature_arg = parse_options('-uni -pos2 -stem -stprm')
        self.feature_list = self._get_feature_list()
        self.labels = [1,2,3,4,5,6,7,8]

    def _get_model(self):
        date = str(datetime.date.today())
        m = load_model('model_'+date)
        if m == None:
            date = str(datetime.date.fromordinal(datetime.date.today().toordinal()-1))
            m = load_model('model_'+date)

        return m

    def _get_feature_list(self):
        date = str(datetime.date.today())
        try:
            infile = open('features_'+date)
        except IOError:
            date = str(datetime.date.fromordinal(datetime.date.today().toordinal()-1))
            infile = open('features_'+date)

        feature_list = pickle.load(infile)
        return feature_list

    def _convert_query_to_dictionary(self, query):
        """Convert each user query to the format required by LibLINEAR

        Args and Need: 
            query: the raw query, like 'What do people think of ?'
            self.feature_list: a list of unique features generated by function feature_generator
    
        Return:
            Convert user's query: store information in a dictionary, 
            which is a member of a list. 
        """
        features = feature_generator(query, self.stopwords, self.feature_arg)
        onerow = {}
        for f in features:
            onerow[self.feature_list.index(f)+1] = 1

        return [onerow]

    def classify(self, query):
        x = self._convert_query_to_dictionary(query)
        p_label, p_val = predict(self.labels, x, self.model, '-b 0')
        if p_val[0][int(p_label[0])-1] == 0:
            p_label[0] = -1

        return int(p_label[0]) # API changes here